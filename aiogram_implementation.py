
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from datetime import datetime, timedelta

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
API_TOKEN = 'YOUR_BOT_TOKEN'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class UserStates(StatesGroup):
    start = State()
    tutorial_sent = State()
    after_tutorial = State()
    name_input = State()
    experience_select = State()
    pain_points_select = State()
    goal_select = State()
    ready_to_pay = State()


# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö (–¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É ‚Äî —Å–ª–æ–≤–Ω–∏–∫, –≤ –ø—Ä–æ–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π PostgreSQL)
user_data = {}


# –ë–õ–û–ö 1: –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id] = {
        "timestamp_start": datetime.now(),
        "stage": "start"
    }
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–∞–≤–∞–π —ñ–Ω—Ñ—É üî•", callback_data="get_info")],
        [types.InlineKeyboardButton(text="–¢–∞ —à–æ —Ç–∞–º —É —Ç–µ–±–µ?", callback_data="whats_inside")]
    ])
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–º—É (–∑–∞–º—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ URL)
    await message.answer_photo(
        photo="https://your-server.com/memes/welcome.jpg",  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π URL
        caption=(
            "–®–æ, –±—Ä–æ, –∑–Ω–æ–≤—É –Ω–∞ —ñ–Ω—Ñ–æ—Ü–∏–≥–∞–Ω—ñ–≤ –Ω–∞—Ç—Ä–∞–ø–∏–≤? üòè\n"
            "–†–æ–∑—Å–ª–∞–±—Å—è, —Ç—É—Ç –±–µ–∑ –≥—ñ–≤–Ω–∞.\n\n"
            "–Ø —Ç–∞–∫ —Å–∞–º–æ –∫–æ–ª–∏—Å—å –ø–æ—á–∏–Ω–∞–≤ ‚Äî –±–µ–∑ –∑–Ω–∞–Ω—å, –±–µ–∑ —Å–∏—Å—Ç–µ–º–∏, –ø—Ä–æ—Å—Ç–æ –≤—ñ—Ä–∏–≤ —É –º–µ–º–∏ –ø—Ä–æ \"—Ç—É–∑–µ–º—É–Ω\" üöÄ\n\n"
            "–ö–æ—Ä–æ—Ç—à–µ, —Å–≤—ñ–π —á—É–≤–∞–∫ —É –∫—Ä–∏–ø—Ç—ñ.\n"
            "–¢—É—Ç —É—Å–µ —á–µ—Å–Ω–æ, –±–µ–∑ –≤–æ–¥–∏—á–∫–∏ ‚Äî —á–∏—Å—Ç–æ –ø—Ä–∞–∫—Ç–∏–∫–∞, –∞–ª—å—Ñ–∞ —ñ —Ç—Ä–æ—Ö–∏ —Ñ–∞–Ω—É üòé\n\n"
            "–ì–æ—Ç–æ–≤–∏–π –∑–ª–æ–≤–∏—Ç–∏ —â–æ—Å—å, —â–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î, –∞ –Ω–µ —á–µ—Ä–≥–æ–≤—É \"–º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—É –±–∞–π–∫—É\"?"
        ),
        reply_markup=keyboard
    )
    
    await state.set_state(UserStates.start)


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –ë–õ–û–ö 1
@dp.callback_query(F.data.in_(["get_info", "whats_inside"]))
async def process_block1(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user_data[user_id]["button_clicked"] = callback.data
    
    # –ß–µ–∫–∞—î–º–æ 2 —Ö–≤–∏–ª–∏–Ω–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    await asyncio.sleep(120)  # 120 —Å–µ–∫—É–Ω–¥ = 2 —Ö–≤–∏–ª–∏–Ω–∏
    
    # –ë–õ–û–ö 2: –¢—É—Ç–æ—Ä—ñ–∞–ª
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–∞–≤–∞–π —Ç—É—Ç–æ—Ä—ñ–∞–ª üé¨", callback_data="get_tutorial")]
    ])
    
    await callback.message.answer(
        "–¢–∞ –Ω–µ –ø–∞—Ä—Å—è, –Ω–µ –±—É–¥–µ –ª–µ–∫—Ü—ñ–π —ñ –Ω—É–¥—è—Ç–∏–Ω–∏ üò¥\n\n"
        "–î–ª—è —Ç–µ–±–µ –ø—ñ–¥–≥–æ—Ç—É–≤–∞–≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç—É—Ç–æ—Ä—ñ–∞–ª —ñ–∑ —Ä–µ–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω–æ—é —ñ–Ω—Ñ–æ—é ‚Äî –±–µ–∑ –≤–æ–¥–∏, –±–µ–∑ —Ñ—ñ–≥–Ω—ñ, –≤—Å–µ —è–∫ —Ç–∏ –ª—é–±–∏—à üí™\n\n"
        "–•–æ—á–µ—à —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å, —è–∫ –∑—ñ–±—Ä–∞—Ç–∏ —Å–≤—ñ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—å —ñ –Ω–µ –∑–ª–∏—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó —á–µ—Ä–≤–æ–Ω–æ—ó —Å–≤—ñ—á–∫–∏?\n\n"
        "–¢—É—Ç —É—Å–µ –ø–æ-–ª—é–¥—Å—å–∫–æ–º—É:\n"
        "‚úÖ 10 —Ö–≤–∏–ª–∏–Ω —á–∏—Å—Ç–æ—ó –∞–ª—å—Ñ–∏\n"
        "‚úÖ –ù—ñ—á–æ–≥–æ –∑–∞–π–≤–æ–≥–æ\n"
        "‚úÖ –ü—ñ—Å–ª—è ‚Äî –≤–∂–µ –±—É–¥–µ—à –Ω–∞ –≥–æ–ª–æ–≤—É –≤–∏—â–∏–º –∑–∞ 80% –Ω–æ–≤–∞—á–∫—ñ–≤\n\n"
        "–õ–µ—Ç–∏–º–æ? üëá",
        reply_markup=keyboard
    )
    
    await state.set_state(UserStates.tutorial_sent)


# –ë–õ–û–ö 2: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—É—Ç–æ—Ä—ñ–∞–ª—É
@dp.callback_query(F.data == "get_tutorial")
async def send_tutorial(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user_data[user_id]["tutorial_sent"] = datetime.now()
    
    await callback.message.answer(
        "–û—Å—å —Ç–≤—ñ–π —Ç—É—Ç–æ—Ä—ñ–∞–ª, –±—Ä–æ! üëá\n\n"
        "https://youtube.com/your-tutorial-link\n\n"  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π –ª—ñ–Ω–∫
        "–î–∏–≤–∏—Å—å —Å–ø–æ–∫—ñ–π–Ω–æ, –ø—ñ—Å–ª—è –Ω–∞–ø–∏—à—É üòâ"
    )
    
    # –ß–µ–∫–∞—î–º–æ 10-15 —Ö–≤–∏–ª–∏–Ω
    await asyncio.sleep(900)  # 15 —Ö–≤–∏–ª–∏–Ω
    
    # –ë–õ–û–ö 3: –ü—ñ—Å–ª—è —Ç—É—Ç–æ—Ä—ñ–∞–ª—É
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏, —à–æ —Ç–∞–º", callback_data="show_inside")]
    ])
    
    await callback.message.answer(
        "–ó–∞—Ü—ñ–Ω–∏–≤, –±—Ä–æ? üëÄ\n"
        "–¶–µ –ª–∏—à–µ –ø–æ—á–∞—Ç–æ–∫ üòâ\n\n"
        "–£—Å–µ—Ä–µ–¥–∏–Ω—ñ Yamato ‚Äî –∫–æ–Ω—Ç–µ–Ω—Ç —É —Å–æ—Ç–Ω—ñ —Ä–∞–∑—ñ–≤ –≥–ª–∏–±—à–∏–π.\n\n"
        "–¢–∞–º –Ω–µ \"—è–∫ –∑–∞—Ä–æ–±–∏—Ç–∏\", –∞ —è–∫ –Ω–µ –∑–ª–∏—Ç–∏, –∫–æ–ª–∏ –≤—Å—ñ —ñ–Ω—à—ñ –ø–∞–Ω—ñ–∫—É—é—Ç—å üíÄ\n\n"
        "–ú–∏ –¥–∞—î–º–æ:\n"
        "üî• –©–æ–¥–µ–Ω–Ω—É –∞–ª—å—Ñ—É –∑ —Ä–∏–Ω–∫—É\n"
        "üìä –†–µ–∞–ª—å–Ω—ñ –∫–µ–π—Å–∏ (–Ω–µ –≤–∏–≥–∞–¥–∫–∏)\n"
        "üí¨ –ö–æ–º'—é–Ω—ñ—Ç—ñ –±–µ–∑ —Ç–æ–∫—Å–∏–∫—ñ–≤ —ñ —Å–ø–∞–º–µ—Ä—ñ–≤\n"
        "üß† Notion-–±–∞–∑—É –∑–Ω–∞–Ω—å, —è–∫—É –æ–Ω–æ–≤–ª—é—é—Ç—å —â–æ—Ç–∏–∂–Ω—è\n\n"
        "–•–æ—á–µ—à –≥–ª—è–Ω—É—Ç–∏, —à–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ?",
        reply_markup=keyboard
    )
    
    await state.set_state(UserStates.after_tutorial)


# –ë–õ–û–ö 3-4: –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
@dp.callback_query(F.data == "show_inside")
async def show_content(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ß–µ–∫–∞—î–º–æ 8-12 –≥–æ–¥–∏–Ω (–¥–ª—è —Ç–µ—Å—Ç—É –º–æ–∂–Ω–∞ –∑–º–µ–Ω—à–∏—Ç–∏)
    await asyncio.sleep(36000)  # 10 –≥–æ–¥–∏–Ω
    
    # –ë–õ–û–ö 4: –ü—ñ–¥—Å–∏–ª–µ–Ω–Ω—è
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–¢–∞ –¥–∞–≤–∞–π –≤–∂–µ –∑–∞–ª–µ—á—É", callback_data="lets_go")],
        [types.InlineKeyboardButton(text="–•–æ—á—É –±—ñ–ª—å—à–µ üî•", callback_data="want_more")]
    ])
    
    await callback.message.answer_photo(
        photo="https://your-server.com/memes/sneakpeek.jpg",  # –ó–∞–º—ñ–Ω–∏—Ç–∏
        caption=(
            "–ù—É –¥–∏–≤–∏—Å—å, —à–æ –≤ –Ω–∞—Å —î üëá\n\n"
            "üß© –ß–µ–∫-–ª–∏—Å—Ç ‚Äî —è–∫ –∑–∞ 5 —Ö–≤ –≤—ñ–¥—Å—ñ—è—Ç–∏ —Å–∫–∞–º-–ø—Ä–æ–µ–∫—Ç–∏\n"
            "üí° –ö–µ–π—Å: —á—É–≤–∞–∫ –∑—Ä–æ–±–∏–≤ —Ö3 –∑–∞ —Ç–∏–∂–¥–µ–Ω—å –±–µ–∑ —ñ—Å—Ç–µ—Ä–∏–∫\n"
            "üìà –©–æ–¥–µ–Ω–Ω—ñ –∞–ø–¥–µ–π—Ç–∏ –ø–æ —Ç–æ–ø–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö\n"
            "üéØ –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ (–≤—ñ–¥ –Ω–æ–≤–∞—á–∫–∞ –¥–æ –ø—Ä–æ)\n\n"
            "–Ü —Ü–µ –ª–∏—à–µ 10% –≤—ñ–¥ —Ç–æ–≥–æ, —â–æ –º–∏ –¥–∞—î–º–æ –≤ Yamato.\n\n"
            "–¢—É—Ç —É—Å–µ –ø—Ä–æ—Å—Ç–æ:\n"
            "‚Äî –Ω—ñ—è–∫–∏—Ö –∫—É—Ä—Å—ñ–≤ –Ω–∞ $5000,\n"
            "‚Äî –Ω—ñ—è–∫–∏—Ö \"–≥—É—Ä—É\" –∑ –æ—Ä–µ–Ω–¥–æ–≤–∞–Ω–∏–º–∏ –ª–∞–º–±–æ—Ä–≥—ñ–Ω—ñ,\n"
            "‚Äî —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ –ª—é–¥–∏, —â–æ –∑–∞—Ä–æ–±–ª—è—é—Ç—å —É –∫—Ä–∏–ø—Ç—ñ –π –¥—ñ–ª—è—Ç—å—Å—è –∞–ª—å—Ñ–æ—é.\n\n"
            "–®–æ, –±—Ä–æ, —Ç–æ–±—ñ —Ç–∞–∫–µ –ø–æ –¥—É—à—ñ? üòâ"
        ),
        reply_markup=keyboard
    )


# –ë–õ–û–ö 5: –ï–º–æ—Ü—ñ–π–Ω–∏–π —Ç—Ä–∏–≥–µ—Ä
@dp.callback_query(F.data.in_(["lets_go", "want_more"]))
async def emotional_trigger(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ß–µ–∫–∞—î–º–æ 24 –≥–æ–¥–∏–Ω–∏ (–¥–ª—è —Ç–µ—Å—Ç—É ‚Äî –º–µ–Ω—à–µ)
    await asyncio.sleep(86400)  # 24 –≥–æ–¥–∏–Ω–∏
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ú–µ–Ω—ñ —Ü–µ —Ç—Ä–µ–±–∞ üî•", callback_data="need_this")]
    ])
    
    await callback.message.answer(
        "–°–ª—É—Ö–∞–π, –±—Ä–æ, —Å–∫–∞–∂–∏ —á–µ—Å–Ω–æ ‚Äî —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ —É–∂–µ \"–ø–æ—á–∏–Ω–∞–≤ —ñ–∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞\"? üòÖ\n\n"
        "–ö—Ä–∏–ø—Ç–∞ ‚Äî —Ü–µ –Ω–µ —Ä—É–ª–µ—Ç–∫–∞.\n"
        "–ü—Ä–æ—Å—Ç–æ –±—ñ–ª—å—à—ñ—Å—Ç—å –Ω–µ –º–∞—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ—á–µ–Ω–Ω—è, —è–∫–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—î, –∫–æ–ª–∏ –≤—Å–µ –ª–µ—Ç–∏—Ç—å —É –º—ñ–Ω—É—Å.\n\n"
        "–£ Yamato –º–∏ –Ω–µ –ø–∞–Ω—ñ—î–º–æ –ø—Ä–∏ -20%.\n"
        "–ú–∏ —á—ñ—Ç–∫–æ –∑–Ω–∞—î–º–æ, —â–æ —Ä–æ–±–∏–º–æ üí™\n\n"
        "–¶–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç, –∞ –∫–æ–º'—é–Ω—ñ—Ç—ñ, –¥–µ:\n"
        "‚úÖ –ö–∞–∂—É—Ç—å \"—Ç—Ä–∏–º–∞–π –ª—ñ–Ω—ñ—é\", –∞ –Ω–µ \"–ø—Ä–æ–¥–∞–≤–∞–π —É—Å–µ\"\n"
        "‚úÖ –î—ñ–ª—è—Ç—å—Å—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏, –∞ –Ω–µ —Å–∫—Ä—ñ–Ω–∞–º–∏ –∑ Binance\n"
        "‚úÖ –î–æ–ø–æ–º–∞–≥–∞—é—Ç—å, –∞ –Ω–µ —Ç—Ä–æ–ª–ª—è—Ç—å\n\n"
        "–•–æ—á–µ—à –≤—ñ–¥—á—É—Ç–∏ —Å–µ–±–µ —á–∞—Å—Ç–∏–Ω–æ—é —Ü—å–æ–≥–æ –¥–≤—ñ–∂—É?\n\n"
        "–ë–æ —Å–∞–º–æ–º—É –≤ –∫—Ä–∏–ø—Ç—ñ ‚Äî —Ü–µ —è–∫ –≥—Ä–∞—Ç–∏ –≤ Dark Souls –±–µ–∑ –≥–∞–π–¥—ñ–≤ üíÄ",
        reply_markup=keyboard
    )


# –ë–õ–û–ö 6: –ê–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è ‚Äî –Ü–º'—è
@dp.callback_query(F.data == "need_this")
async def start_survey_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await callback.message.answer(
        "–ù—É –¥–∞–≤–∞–π, –±—Ä–∞—Ç–∞–Ω, –∑—Ä–æ–±–∏–º–æ –º–∞–ª–µ–Ω—å–∫–∏–π \"KYC\", –∞–ª–µ –ø–æ-–Ω–∞—à–æ–º—É üòé\n"
        "–ë–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç—ñ–≤, –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —Ö—Ç–æ —Ç–∏ üëá\n\n"
        "1Ô∏è‚É£ –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏, –±—Ä–æ?\n"
        "(–∞–±–æ —è–∫ —Ç–µ–±–µ –∫–ª–∏–∫–∞—Ç–∏ –≤ —á–∞—Ç—ñ?)"
    )
    
    await state.set_state(UserStates.name_input)


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
@dp.message(UserStates.name_input)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.text
    user_data[user_id]["name"] = user_name
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–Ø —â–µ –Ω–æ–≤–∞—á–æ–∫ üçº", callback_data="exp_newbie")],
        [types.InlineKeyboardButton(text="–ú—ñ—Å—è—Ü—ñ–≤ 3‚Äì6", callback_data="exp_3-6")],
        [types.InlineKeyboardButton(text="–î–µ—Å—å —Ä—ñ–∫, —É–∂–µ —à–∞—Ä—é", callback_data="exp_1year")],
        [types.InlineKeyboardButton(text="–¢–∞ —è –ø–µ—Ä–µ–∂–∏–≤ LUNA, FTX —ñ —â–µ –Ω–µ –∑–¥–∞–≤—Å—è üòÇ", callback_data="exp_veteran")]
    ])
    
    await message.answer(
        f"–ö–∞–π—Ñ, {user_name}! ü§ù\n\n"
        "2Ô∏è‚É£ –°–∫—ñ–ª—å–∫–∏ –≤–∂–µ –≤ –∫—Ä–∏–ø—Ç—ñ?",
        reply_markup=keyboard
    )
    
    await state.set_state(UserStates.experience_select)


# –î–æ—Å–≤—ñ–¥ —É –∫—Ä–∏–ø—Ç—ñ
@dp.callback_query(F.data.startswith("exp_"))
async def process_experience(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user_data[user_id]["experience"] = callback.data.replace("exp_", "")
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–Ü–Ω—Ñ–æ—Ü–∏–≥–∞–Ω–∏", callback_data="pain_infoscam")],
        [types.InlineKeyboardButton(text="–ó–ª–∏–≤–∏", callback_data="pain_losses")],
        [types.InlineKeyboardButton(text="–ë–µ–∑—Å–∏—Å—Ç–µ–º–Ω—ñ—Å—Ç—å", callback_data="pain_chaos")],
        [types.InlineKeyboardButton(text="–ö—É–ø–∞ \"–µ–∫—Å–ø–µ—Ä—Ç—ñ–≤\" —ñ–∑ Telegram", callback_data="pain_experts")],
        [types.InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é, –∑ —á–æ–≥–æ –ø–æ—á–∞—Ç–∏", callback_data="pain_start")]
    ])
    
    await callback.message.answer(
        "Respect ü´°\n\n"
        "3Ô∏è‚É£ –®–æ —Ç–µ–±–µ –±—ñ–ª—å—à–µ –≤—Å—å–æ–≥–æ –±—ñ—Å–∏—Ç—å —É –∫—Ä–∏–ø—Ç—ñ?\n"
        "(–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –∂–º–∏ —à–æ –≤ –¥—É—à—É –∑–∞–ø–∞–ª–æ)",
        reply_markup=keyboard
    )
    
    await state.set_state(UserStates.pain_points_select)


# Pain points (–º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫–∞)
@dp.callback_query(F.data.startswith("pain_"))
async def process_pain_points(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–î–æ–¥–∞–Ω–æ!")
    user_id = callback.from_user.id
    
    if "pain_points" not in user_data[user_id]:
        user_data[user_id]["pain_points"] = []
    
    pain = callback.data.replace("pain_", "")
    user_data[user_id]["pain_points"].append(pain)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–î–∞–ª—ñ" –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–Ü–Ω—Ñ–æ—Ü–∏–≥–∞–Ω–∏", callback_data="pain_infoscam")],
        [types.InlineKeyboardButton(text="–ó–ª–∏–≤–∏", callback_data="pain_losses")],
        [types.InlineKeyboardButton(text="–ë–µ–∑—Å–∏—Å—Ç–µ–º–Ω—ñ—Å—Ç—å", callback_data="pain_chaos")],
        [types.InlineKeyboardButton(text="–ö—É–ø–∞ \"–µ–∫—Å–ø–µ—Ä—Ç—ñ–≤\" —ñ–∑ Telegram", callback_data="pain_experts")],
        [types.InlineKeyboardButton(text="–ù–µ –∑–Ω–∞—é, –∑ —á–æ–≥–æ –ø–æ—á–∞—Ç–∏", callback_data="pain_start")],
        [types.InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—ñ", callback_data="pain_done")]
    ])
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)


# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É pain points
@dp.callback_query(F.data == "pain_done")
async def pain_done(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–∞—Å–∏–≤–∫—É –±–µ–∑ –Ω–µ—Ä–≤—ñ–≤ üòå", callback_data="goal_passive")],
        [types.InlineKeyboardButton(text="–ó–∞—Ä–æ–±–ª—è—Ç–∏ —Å—Ç–∞–±—ñ–ª—å–Ω–æ üìà", callback_data="goal_stable")],
        [types.InlineKeyboardButton(text="–ü–æ—Ç—Ä–∞–ø–∏—Ç–∏ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—É –∫–æ–º'—é–Ω—ñ—Ç—ñ üí¨", callback_data="goal_community")],
        [types.InlineKeyboardButton(text="–ê–ª—å—Ñ—É —Ç–∞ —ñ–Ω—Å–∞–π—Ç–∏ üòé", callback_data="goal_alpha")]
    ])
    
    await callback.message.answer(
        "–ê–≥–∞, —Ä–æ–∑—É–º—ñ—é —Ç–µ–±–µ, –±—Ä–æ üíØ\n\n"
        "4Ô∏è‚É£ –Ü –≥–æ–ª–æ–≤–Ω–µ ‚Äî —á–æ–≥–æ —Ç–∏ —Ö–æ—á–µ—à?",
        reply_markup=keyboard
    )
    
    await state.set_state(UserStates.goal_select)


# –ú–µ—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.callback_query(F.data.startswith("goal_"))
async def process_goal(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    user_data[user_id]["goal"] = callback.data.replace("goal_", "")
    user_name = user_data[user_id].get("name", "–±—Ä–æ")
    
    await callback.message.answer(
        f"–î—è–∫—É—é, {user_name}! üî•\n\n"
        "–¢–µ–ø–µ—Ä —è —Ä–æ–∑—É–º—ñ—é, —â–æ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞.\n"
        "Yamato ‚Äî —Å–∞–º–µ —Ç–µ –º—ñ—Å—Ü–µ, –¥–µ —Ç–∏ –∑–Ω–∞–π–¥–µ—à —Ü–µ.\n\n"
        "–î–∞–π –º–µ–Ω—ñ —Ç—Ä–æ—Ö–∏ —á–∞—Å—É –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–ª—è —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —ñ–Ω—Ñ—É üëÄ\n"
        "–°–∫–æ—Ä–æ –Ω–∞–ø–∏—à—É üòâ"
    )
    
    # –ß–µ–∫–∞—î–º–æ 36-48 –≥–æ–¥–∏–Ω (–¥–ª—è —Ç–µ—Å—Ç—É ‚Äî –º–µ–Ω—à–µ)
    await asyncio.sleep(129600)  # 36 –≥–æ–¥–∏–Ω
    
    # –ë–õ–û–ö 7: –°–æ—Ü—ñ–∞–ª—å–Ω–∏–π –¥–æ–∫–∞–∑
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–Ø –≤—Å—Ç–∏–≥–∞—é?", callback_data="am_i_in_time")],
        [types.InlineKeyboardButton(text="–¢–∞ —Å–∫—ñ–ª—å–∫–∏ –º–æ–∂–Ω–∞, –¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø", callback_data="give_access")]
    ])
    
    await callback.message.answer(
        "–ù—É —à–æ, –±—Ä–æ, –∫–æ—Ä–æ—Ç–∫–æ –ø–æ —Ñ–∞–∫—Ç–∞—Ö üëá\n\n"
        "Yamato –∑–∞—Ä–∞–∑ –≤—ñ–¥–∫—Ä–∏–≤ –ø–µ—Ä—à—É —Ö–≤–∏–ª—é –¥–æ—Å—Ç—É–ø—É ‚Äî —ñ –º—ñ—Å—Ü—å –ª–∏—à–∏–ª–æ—Å—å –Ω–µ —Ç–∞–∫ —É–∂–µ –π –±–∞–≥–∞—Ç–æ.\n\n"
        "–ß–æ–º—É?\n"
        "–ë–æ –º–∏ –Ω–µ –±–µ—Ä–µ–º–æ –≤—Å—ñ—Ö –ø—ñ–¥—Ä—è–¥. –¢—ñ–ª—å–∫–∏ —Ç–∏—Ö, —Ö—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ö–æ—á–µ –¥—ñ—è—Ç–∏.\n\n"
        "–•–ª–æ–ø—Ü—ñ, —â–æ –∑–∞–ª–µ—Ç—ñ–ª–∏ –ø–µ—Ä—à–∏–º–∏, —É–∂–µ:\n"
        "‚úÖ –ü—ñ–¥–Ω—è–ª–∏ –ø—Ä–æ—Ñ—ñ—Ç –±–µ–∑ –ø–∞–Ω—ñ–∫–∏\n"
        "‚úÖ –°–ø–æ–∫—ñ–π–Ω–æ —Ç–æ—Ä–≥—É—é—Ç—å –∑–∞ —Å–∏—Å—Ç–µ–º–æ—é\n"
        "‚úÖ –ù–µ –ª–æ–≤–ª—è—Ç—å FOMO –Ω–∞ –∫–æ–∂–Ω—ñ–π –Ω–æ–≤–∏–Ω—ñ\n\n"
        "–û—Å—å —Ä–µ–∞–ª—å–Ω—ñ –≤—ñ–¥–≥—É–∫–∏:\n"
        "üí¨ \"–ù–∞—Ä–µ—à—Ç—ñ –∑–Ω–∞–π—à–æ–≤ –Ω–æ—Ä–º–∞–ª—å–Ω–∏—Ö –ª—é–¥–µ–π –±–µ–∑ –ø–æ–Ω—Ç—ñ–≤\"\n"
        "üí¨ \"–ó–∞ —Ç–∏–∂–¥–µ–Ω—å –∑—Ä–æ–∑—É–º—ñ–≤ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–∞ –ø—ñ–≤ —Ä–æ–∫—É –Ω–∞ YouTube\"\n"
        "üí¨ \"–¢—É—Ç —Ä–µ–∞–ª—å–Ω–æ –¥—ñ–ª—è—Ç—å—Å—è –∞–ª—å—Ñ–æ—é, –∞ –Ω–µ –≤–ø–∞—Ä—é—é—Ç—å –∫—É—Ä—Å–∏\"\n\n"
        "–Ø–∫—â–æ –≤—ñ–¥—á—É–≤–∞—î—à, —â–æ –ø–æ—Ä–∞ –Ω–∞—Ä–µ—à—Ç—ñ –≤–∏—Ä–≤–∞—Ç–∏—Å—å —ñ–∑ –∫–æ–ª–∞ –∑–ª–∏–≤—ñ–≤ ‚Äî —Å–∞–º–µ —á–∞—Å.\n\n"
        "–ê–ª–µ –º—ñ—Å—Ü—å –Ω–∞ —Ü—é —Ö–≤–∏–ª—é –∑–∞–ª–∏—à–∏–ª–æ—Å—å **–º–µ–Ω—à–µ 20**.",
        reply_markup=keyboard
    )


# –ë–õ–û–ö 8: –ö–æ–Ω–≤–µ—Ä—Å—ñ—è
@dp.callback_query(F.data.in_(["am_i_in_time", "give_access"]))
async def conversion(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–Ø –∑ –≤–∞–º–∏ üí™", url="https://payment.yamato.com")],  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π –ª—ñ–Ω–∫
        [types.InlineKeyboardButton(text="–•–æ—á—É —É—Ç–æ—á–Ω–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ", url="https://t.me/yamato_support")]  # –ó–∞–º—ñ–Ω–∏—Ç–∏
    ])
    
    await callback.message.answer(
        "–û–∫–µ–π, –±–µ–∑ –º—ñ–Ω–µ—Ä–∞–ª–∫–∏.\n\n"
        "Yamato ‚Äî —Ü–µ –∑–∞–∫—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ-–∫–æ–º'—é–Ω—ñ—Ç—ñ, –¥–µ:\n"
        "üíé –Ω–æ–≤–∞—á–∫–∏ –Ω–µ –≥—É–±–ª—è—Ç—å—Å—è,\n"
        "üìä —Ç—Ä–µ–π–¥–µ—Ä–∏ –¥—ñ–ª—è—Ç—å—Å—è –∞–ª—å—Ñ–æ—é,\n"
        "üí¨ –Ω—ñ—Ö—Ç–æ –Ω–µ –≤–ø–∞—Ä—é—î \"–ø–æ—Ä–∞–¥–∏\" –∑–∞ –¥–æ–Ω–∞—Ç–∏.\n\n"
        "–©–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ:\n"
        "üîê Notion-–±–∞–∑–∞ –∑ –≥–∞–π–¥–∞–º–∏, —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏ —ñ –∫–µ–π—Å–∞–º–∏\n"
        "üí¨ Discord-—Å–µ—Ä–≤–µ—Ä –∑ –∫–∞–Ω–∞–ª–∞–º–∏ –ø—ñ–¥ —Ä—ñ–∑–Ω—ñ —Ä—ñ–≤–Ω—ñ\n"
        "üìà Telegram-–∫–∞–Ω–∞–ª –∑ —â–æ–¥–µ–Ω–Ω–∏–º–∏ –∞–ø–¥–µ–π—Ç–∞–º–∏\n"
        "üéØ 7-–¥–µ–Ω–Ω–∏–π —Å—Ç–∞—Ä—Ç-—á–µ–ª–µ–Ω–¥–∂ \"From Zero to Hero\"\n"
        "üß† –ú–µ–Ω—Ç–æ—Ä—Å—å–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ (–Ω–µ –±–æ—Ç–∏, –∞ –∂–∏–≤—ñ –ª—é–¥–∏)\n\n"
        "üíµ –ü—ñ–¥–ø–∏—Å–∫–∞: **$199 / 2 –º—ñ—Å—è—Ü—ñ**\n"
        "(—Ü–µ –º–µ–Ω—à–µ $4 –Ω–∞ –¥–µ–Ω—å ‚Äî –æ–¥–Ω–∞ –∫–∞–≤–∞ –≤ Starbucks ‚òï)\n\n"
        "–û–ø–ª–∞—Ç–∞: –∫—Ä–∏–ø—Ç–∞ (USDT/USDC) –∞–±–æ –∫–∞—Ä—Ç–∫–∞.\n\n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à:\n"
        "‚úÖ –î–æ—Å—Ç—É–ø –¥–æ Notion-–±–∞–∑–∏ (–æ–¥—Ä–∞–∑—É)\n"
        "‚úÖ –Ü–Ω–≤–∞–π—Ç —É Discord (–ø—Ä–æ—Ç—è–≥–æ–º 5 —Ö–≤)\n"
        "‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ Telegram-–∫–∞–Ω–∞–ª\n"
        "‚úÖ –°—Ç–∞—Ä—Ç —á–µ–ª–µ–Ω–¥–∂—É\n\n"
        "–ù—É —à–æ, –ª–µ—Ç–∏–º–æ? üöÄ",
        reply_markup=keyboard
    )
    
    await state.set_state(UserStates.ready_to_pay)


# –ë–õ–û–ö 9: –û–Ω–±–æ—Ä–¥–∏–Ω–≥ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ webhook –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏)
async def onboarding(user_id: int):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ—á–∞—Ç–∏ —á–µ–ª–µ–Ω–¥–∂ üí™", callback_data="start_challenge")],
        [types.InlineKeyboardButton(text="–ì–ª—è–Ω—É—Ç–∏ Notion üìö", url="https://notion.yamato.com")],
        [types.InlineKeyboardButton(text="–£–≤—ñ–π—Ç–∏ –≤ Discord üí¨", url="https://discord.gg/yamato")]
    ])
    
    await bot.send_message(
        user_id,
        "–í–Ü–¢–ê–Æ, –ë–†–û! üî•üî•üî•\n\n"
        "–¢–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ —Å—Ç–∞–≤ —á–∞—Å—Ç–∏–Ω–æ—é Yamato ‚Äî –º—ñ—Å—Ü—è, –¥–µ –∑–∞–º—ñ—Å—Ç—å \"–ø–∞–Ω—ñ–∫–∞\" –∫–∞–∂—É—Ç—å \"–∑–∞—Ä—è–¥–∂–∞–π —Å—Ç–∞–∫–∞–Ω\" üòé\n\n"
        "–¢–µ–ø–µ—Ä —Ç–∏ –≤ –∫–ª—É–±—ñ, –¥–µ:\n"
        "‚úÖ –ù—ñ—Ö—Ç–æ –Ω–µ –ø–∞–Ω—ñ—î –ø—Ä–∏ –¥–∞–º–ø–∞—Ö\n"
        "‚úÖ –£—Å—ñ –¥—ñ–ª—è—Ç—å—Å—è –∞–ª—å—Ñ–æ—é, –∞ –Ω–µ —Ö–µ–π—Ç—è—Ç—å\n"
        "‚úÖ –Ñ —á—ñ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–∞, –∞ –Ω–µ —Ö–∞–æ—Å\n\n"
        "–ü–æ—á–Ω–µ–º–æ –∑ –ª–µ–≥–∫–æ–≥–æ ‚Äî –Ω–∞—à —Å—Ç–∞—Ä—Ç-—á–µ–ª–µ–Ω–¥–∂ **\"7 –¥–Ω—ñ–≤ –¥–æ –∞–ø–≥—Ä–µ–π–¥—É\"**:\n\n"
        "üìÖ –î–µ–Ω—å 1: –Ø–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n"
        "üìÖ –î–µ–Ω—å 2: –¢–æ–ø-3 –ø–æ–º–∏–ª–∫–∏ –Ω–æ–≤–∞—á–∫—ñ–≤ (—ñ —è–∫ —ó—Ö —É–Ω–∏–∫–Ω—É—Ç–∏)\n"
        "üìÖ –î–µ–Ω—å 3: –î–µ —à—É–∫–∞—Ç–∏ –∞–ª—å—Ñ—É (—ñ —è–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç–∏—Å—å –Ω–∞ —Å–∫–∞–º)\n"
        "üìÖ –î–µ–Ω—å 4: –ë–∞–∑–æ–≤–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –∞–Ω–∞–ª—ñ–∑ (–±–µ–∑ –≤–æ–¥–∏)\n"
        "üìÖ –î–µ–Ω—å 5: –ü—Å–∏—Ö–æ–ª–æ–≥—ñ—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É (—á–æ–º—É —Ç–∏ –∑–ª–∏–≤–∞—î—à)\n"
        "üìÖ –î–µ–Ω—å 6: –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Notion-–±–∞–∑—É –Ω–∞ –ø–æ–≤–Ω—É\n"
        "üìÖ –î–µ–Ω—å 7: –¢–≤—ñ–π –ø–µ—Ä—à–∏–π –ø—Ä–æ—Ñ—ñ—Ç–Ω–∏–π —Ç—Ä–µ–π–¥ (–ø—ñ–¥ —Å—É–ø—Ä–æ–≤–æ–¥–æ–º)\n\n"
        "–ö–æ–∂–µ–Ω –¥–µ–Ω—å ‚Äî –∫–æ—Ä–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∞ (10-15 —Ö–≤), –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ –º–µ–Ω—Ç–æ—Ä—ñ–≤ —ñ –Ω–æ–≤—ñ –∞–ø–¥–µ–π—Ç–∏ üí™\n\n"
        "–ì–æ—Ç–æ–≤–∏–π –ø—Ä–æ–∫–∞—á–∞—Ç–∏ —Å–∫—ñ–ª–∏ –π –Ω–µ –ª–æ–≤–∏—Ç–∏ FOMO?",
        reply_markup=keyboard
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
